bcrypt.hash('password123', saltRounds, (err, hash) => {
    if (err) throw err;
    console.log("Hashed Password:", hash);
})

bcrypt.compare('password123', storedHash, (err, result) => {
    if (result) {
        console.log("Password is valid!");
    } else {
        console.log("Invalid password.");
    }
})

JWT - JSON Web Token

npm i jsonwebtoken
import jwt from 'jsonwebtoken'
const secretKey = 'your_jwt_secret';

const token = jwt.sing(
    { userId: user._id}, 
    secretKey,
    { expiresIn: '1h' }
);

res.json({ token });

const verifyToken = (req, res, next) => {
    const token = req.headers['authorization'];
    if(!token) return res.status(403).send("Token is required.");

    jwt.verify(token, secretKey, (err, decoded) => {
        if (err) return res.status(401).send("Invalid token.");
        req.userId = decoded.userId;
        next();
    });
}

app.get('/api/protected', verifyToken, (req, res) => {
    res.send("This is a protected route");
});